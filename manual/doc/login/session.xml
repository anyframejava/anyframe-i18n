<chapter id="login_login_session">
	<title>Session</title>

	<section id="login_login_savesession">
       	<title>사용자 정보를 Session 저장</title>
          	<para>
       			Application에서 사용자 정보는 자주 사용되므로 Session에 저장해 필요할 때 Session에서 꺼내 쓰도록 한다.
       			그러기 위해서는 Session에 앞서 조회한 사용자 정보를 저장하는 로직이 필요하다.
			</para>
			<para>
				아래는 사용자 인증, 정보조회, 세션 저장하는 AuthenticationController의 일부이다.
			</para>
			<programlisting language="java"><![CDATA[@RequestMapping("/login.do")
public String login(@RequestParam("id") String id,
		@RequestParam("password") String password, Model model,
		HttpSession session, HttpServletRequest request,  HttpServletResponse response) throws Exception {
	
	//사용자 인증
    LoginInfo loginInfo = new LoginInfo();
    loginInfo.setId(id);
    loginInfo.setPassword(password);
    loginInfo.setIpAddress(request.getRemoteAddr());
    SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMddHHmmss");
    formatter.setTimeZone(TimeZone.getTimeZone("GMT"));
    loginInfo.setTime(formatter.format(new Date()));
			
    boolean certification =  authenticationService.authenticate(loginInfo);
	
    if(certification){
        UserInfo userInfo = userService.getUserInfo(id);
        localeResolver.setLocale(request, response, userInfo.getLanguage());
        session.setAttribute("userInfo", userInfo);
        return "forward:/loginMovieFinder.do?method=list";
    }else{
        model.addAttribute("loginError", "login.error");
        return "/login/login";
    }
}]]></programlisting>
		<para>사용자 정보를 userInfo란 이름으로 Session에 저장한다.</para>
	</section>
	<section id="login_login_interceptor">
		<title>AuthenticationInterceptor</title>
		<para>
  			AuthenticationInterceptor는 사용자가 서버에 Request를 보낼 경우 Session에 저장된 사용자 정보를 꺼내 
  			ThreadLocal에 저장하는 역할을 한다. ThreadLocal에 저장된 값들은 Request가 끝나는 시점까지 유지되기 때문에
  			Biz. Service Layer에서 언제든지 필요한 정보를 꺼낼 수 있다.
		</para>
		<para>
		AuthenticationInterceptor 설정은 아래와 같다.
		</para>
		<programlisting language="java"><![CDATA[<mvc:interceptors>
    <bean class="org.anyframe.plugin.login.interceptor.AuthenticationInterceptor" />
</mvc:interceptors>]]></programlisting>
		<para>
		AuthenticationInterceptor의 preHandler메소드는 아래와 같다.
		</para>
		<programlisting language="java"><![CDATA[public boolean preHandle(HttpServletRequest request,
			HttpServletResponse response, Object handler) throws Exception {
    HttpSession session = request.getSession();
		
    if( session != null ){
        UserInfo userInfo = (UserInfo) session.getAttribute("userInfo");
        if( userInfo != null ){
            ThreadLocalUtil.add("userInfo", (UserInfo) session.getAttribute("userInfo"));
        }
    }
    
    return super.preHandle(request, response, handler);
}]]></programlisting>
	<para>
		Session에 저장된 사용자 정보를 userInfo란 이름으로 ThreadLocal에 저장하고 있다.
		AuthenticationInterceptor의 afterCompletion메소드에서는 반드시 ThreadLocal에 저장된 값을 clearSharedInfo을 호출해
		삭제하도록 한다.
	</para>
	<programlisting language="java"><![CDATA[public void afterCompletion(HttpServletRequest request,
			HttpServletResponse response, Object handler, Exception ex)
			throws Exception {
    ThreadLocalUtil.clearSharedInfo();
    super.afterCompletion(request, response, handler, ex);
}]]></programlisting>
	</section>
</chapter>
